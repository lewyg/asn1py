group python;

//delimiters "$", "$"

RootXml(arrsFiles) ::= <<
# ASN.1 Data model

import asn1

MAX = asn1.INT_MAX
MIN = asn1.INT_MIN
INF = asn1.INFINITY
NAN = asn1.NAN


def get_string_init_char(obj):
    if isinstance(obj, asn1.NumericString) or isinstance(obj, asn1.BitString):
        return '0'
    elif isinstance(obj, asn1.OctetString):
        return b'0'
    else:
        return ' '


$arrsFiles;separator="\n"$
# End

>>

FileXml(sFileName, arrsModules) ::= <<
$arrsModules;separator="\n"$
>>

ModuleXml(sName, sCName, arrsImportedModules, arrsExpTypes, arrsExpVars, arrsTases, arrsVases) ::=<<
$arrsTases;separator="\n"$
$arrsVases;separator="\n"$
>>

ImportedMod(sName, sCName, arrsTypes, arrsVars) ::= ""

TasXml(sName, nLine, nPos, sType, sCName, sAssigOp, sContract) ::= <<
class $sName$$sType$


>>

VasXml(sName, nLine, nPos, sType, sValue, sCName) ::= <<
# $sName$
class _$sName$Type$sType$


$sName$: _$sName$Type.__typing__ = _$sName$Type($sValue$)


>>

TypeGeneric(nLine, nPos, sSubType) ::= <<
$sSubType$
>>

MinMaxType(sName, sMin, sMax, bFixedSize) ::= <<
(asn1.$sName$):
$if(bFixedSize)$
    constraints = 'SIZE($sMin$)'
$else$
    constraints = 'SIZE($sMin$ .. $sMax$)'
$endif$


    def init_value(self):
        return $sMin$
        
    def check_constraints(self, value):
$if(bFixedSize)$
        result = value == $sMax$
$else$
        result = $sMin$ <= value <= $sMax$
$endif$

        return result
>>

MinMaxType2(sName, sMin, sMax, bFixedSize) ::= <<
(asn1.$sName$):
$if(bFixedSize)$
    constraints = 'SIZE($sMin$)'
$else$
    constraints = 'SIZE($sMin$ .. $sMax$)'
$endif$


    def init_value(self):
        return get_string_init_char(self) * $sMin$
        
    def check_constraints(self, value):
$if(bFixedSize)$
        result = len(value) == $sMax$
$else$
        result = $sMin$ <= len(value) <= $sMax$
$endif$

        return result
>>

BooleanType() ::= <<
(asn1.Boolean):
    pass
>>

NullType() ::= <<
(asn1.Null):
    pass
>>

IntegerType() ::= "Integer"
RealType() ::= "Real"

BitStringType() ::= "BitString"
OctetStringType() ::= "OctetString"
IA5StringType() ::= "IA5String"
NumericStringType() ::= "NumericString"

AssigOpNormalType () ::= "="
AssigOpSpecialType () ::= "::"

EnumItem (sName, sCName, nVal, nLine, nPos, sCID) ::= <<
$sCID$ = $nVal$
>>

EnumType(arrsItems) ::= <<
(asn1.Enumerated):
    class Value(asn1.Enumerated.Value):
        NONE = None
        $arrsItems;separator="\n"$
        
    __base__ = Value


# for global access
$arrsItems;separator="\n"$
>>

ChoiceChild(sName, sCName, nLine, nPos, sChildContent, sNamePresent ) ::= <<
# $sName$
class _$sName$Type$sChildContent$

self.$sName$Type = _$sName$Type
self.$sName$: self.$sName$Type.__typing__ = self.$sName$Type()
self.attributes['$sName$'] = False

>>

ChoiceType(arrsChildren) ::= <<
(asn1.Choice):
    def __init__(self, choice=None):
        self.attributes = dict()
        
        $arrsChildren;separator="\n"$
        self.initialized = True
        self._append_choice(choice)
>>

SequenceChild(sName, sCName, bOptional, sDefVal, nLine, nPos, sChildContent ) ::= <<
# $sName$
class _$sName$Type$sChildContent$

self.$sName$Type = _$sName$Type
self.$sName$: self.$sName$Type.__typing__ = self.$sName$Type()
self.attributes['$sName$'] = True
$if(bFixedSize)$
self._optional.append('$sName$')
$endif$

>>

SequenceType(arrsChildren) ::= <<
(asn1.Sequence):
    def __init__(self, **kwargs):
        self.attributes = dict()
        self._optional = list()
        
        $arrsChildren;separator="\n"$
        self.initialized = True
        self._create_from_kwargs(kwargs)
>>

SequenceOfType(sMin, sMax, sChild) ::= <<
(asn1.SequenceOf):
    $SequenceOfTypeElement(sChild)$
    
    __element__ = _ElementType
    
    constraints = 'SIZE($sMin$ .. $sMax$)'
    
    def init_value(self):
        return $sMin$  # array size
        
    def check_constraints(self, value):
        result = $sMin$ <= len(value) <= $sMax$
        return result
>>

SequenceOfTypeElement(sChild) ::= <<
class _ElementType$sChild$
>>

RefTypeMinMax(sMin, sMax, sName, sModName, sCName, sCModName) ::= <<
($sName$):
    pass
>>

RefType(sName, sModName, sCName, sCModName) ::= <<
($sName$):
    pass
>>

Contract(sTypePattern, sExpr) ::= ""
TypePatternCommonTypes() ::= ""
TypePatternSequence(sName, sCName, arrsChildren) ::= ""
SequencePatternChild(sName, sCName) ::= ""
ContractExprMinMax(sPattern, sMin, sMax, bFixedSize) ::= ""
ContractExprSize(sPattern, sMin, sMax, bFixedSize) ::= ""
ContractExprSequence(arrsChildren) ::= ""

Print_IntegerValue(nVal) ::= "$nVal$"
Print_RealValue(dVal) ::= "$dVal$"
Print_StringValue(v) ::= <<"$v$">>
Print_TrueValue() ::= "True"
Print_FalseValue() ::= "False"
Print_BitStringValue(v) ::= <<"$v$">>
Print_OctetStringValue(arruOctets) ::= <<bytes.fromhex('$arruOctets; format="X2"$')>>
Print_RefValue(sName) ::= <<$sName$>>
Print_SeqOfValue(arrsValues) ::= <<{$arrsValues; separator=", "$}>>
Print_SeqValue_Child(sName, sChildValue) ::= <<$sName$=$sChildValue$>>
Print_SeqValue(arrsValues) ::= <<$arrsValues; separator=", "$>>
Print_ChValue(sAltName, sAltValue) ::= <<choice=dict(name='$sAltName$', value=dict($sAltValue$))>>
Print_NullValue() ::= "None"