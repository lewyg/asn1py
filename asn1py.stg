group python;

//delimiters "$", "$"

RootXml(arrsFiles) ::= <<
# ASN.1 Data model

import asn1
import typing

MAX = asn1.INT_MAX
MIN = asn1.INT_MIN
INF = asn1.INFINITY
NAN = asn1.NAN


def get_string_init_char(obj):
    if issubclass(obj, asn1.NumericString) or issubclass(obj, asn1.BitString):
        return '0'
    elif issubclass(obj, asn1.OctetString):
        return b'0'
    else:
        return ' '


def add_globals(**kwargs):
    for name, value in kwargs.items():
        globals()[name] = value


$arrsFiles;separator="\n"$
# End

>>

FileXml(sFileName, arrsModules) ::= <<
$arrsModules;separator="\n"$
>>

ModuleXml(sName, sCName, arrsImportedModules, arrsExpTypes, arrsExpVars, arrsTases, arrsVases) ::=<<
$arrsTases;separator="\n"$
$arrsVases;separator="\n"$
>>

ImportedMod(sName, sCName, arrsTypes, arrsVars) ::= ""

TasXml(sName, nLine, nPos, sType, sCName, sAssigOp, sContract) ::= <<
class $sName$$sType$


>>

VasXml(sName, nLine, nPos, sType, sValue, sCName) ::= <<
# $sName$
class _$sName$Type$sType$


$sName$ = _$sName$Type($sValue$)


>>

TypeGeneric(nLine, nPos, sSubType) ::= <<
$sSubType$
>>

Typing(sType) ::= <<
def __new__(cls, *args, **kwargs) -> typing.Union[$sType$.__typing__, $sType$]:
    return object.__new__(cls)
>>

MinMaxType(sName, sMin, sMax, bFixedSize) ::= <<
($sName$):
    $Typing(sName)$

$if(bFixedSize)$
    constraints = 'SIZE($sMin$)'
$else$
    constraints = 'SIZE($sMin$ .. $sMax$)'
$endif$


    @classmethod
    def init_value(cls):
        return 0 if $sMin$ <= 0 <= $sMax$ else $sMin$

    @classmethod
    def check_constraints(cls, value):
$if(bFixedSize)$
        result = value == $sMax$
$else$
        result = $sMin$ <= value <= $sMax$
$endif$

        return result

    $Encoding(sMin=sMin, sMax=sMax)$
>>

MinMaxType2(sName, sMin, sMax, bFixedSize) ::= <<
($sName$):
    $Typing(sName)$

$if(bFixedSize)$
    constraints = 'SIZE($sMin$)'
$else$
    constraints = 'SIZE($sMin$ .. $sMax$)'
$endif$


    @classmethod
    def init_value(cls):
        return get_string_init_char(cls) * $sMin$

    @classmethod
    def check_constraints(cls, value):
$if(bFixedSize)$
        result = len(value) == $sMax$
$else$
        result = $sMin$ <= len(value) <= $sMax$
$endif$

        return result

    $Encoding(sMin=sMin, sMax=sMax)$
>>

Encoding(sMin, sMax) ::= <<
@classmethod
def _uper_encode(cls, bit_stream, value):
$if(sMin)$
    cls._default_uper_encode(bit_stream, value, $sMin$, $sMax$)
$else$
    cls._default_uper_encode(bit_stream, value)
$endif$


@classmethod
def _uper_decode(cls, bit_stream):
$if(sMin)$
    return cls._default_uper_decode(bit_stream, $sMin$, $sMax$)
$else$
    return cls._default_uper_decode(bit_stream)
$endif$
>>

BooleanType() ::= <<
(asn1.Boolean):
    $Typing("asn1.Boolean")$

    $Encoding()$
>>

NullType() ::= <<
(asn1.Null):
    pass
>>

IntegerType() ::= "asn1.Integer"
RealType() ::= "asn1.Real"

BitStringType() ::= "asn1.BitString"
OctetStringType() ::= "asn1.OctetString"
IA5StringType() ::= "asn1.IA5String"
NumericStringType() ::= "asn1.NumericString"

AssigOpNormalType () ::= "="
AssigOpSpecialType () ::= "::"

EnumItem (sName, sCName, nVal, nLine, nPos, sCID) ::= <<
$sCID$ = $nVal$
>>

EnumType(arrsItems) ::= <<
(asn1.Enumerated):
    class Value(asn1.Enumerated.Value):
        NONE = None
        $arrsItems;separator="\n"$

    __base__ = Value

    # for global access
    add_globals(
        $arrsItems;separator=",\n"$
    )

    $Encoding()$
>>

ChoiceChild(sName, sCName, nLine, nPos, sChildContent, sNamePresent ) ::= <<
# $sName$
class _$sName$Type$sChildContent$

self.$sName$Type = _$sName$Type
self.$sName$ = self.$sName$Type()
self.attributes['$sName$'] = False

>>

ChoiceType(arrsChildren) ::= <<
(asn1.Choice):
    def __init__(self, choice=None):
        self.attributes = dict()

        $arrsChildren;separator="\n"$
        self.initialized = True
        self._init_choice(choice)

    $Encoding()$
>>

SequenceChild(sName, sCName, bOptional, sDefVal, nLine, nPos, sChildContent ) ::= <<
# $sName$
class _$sName$Type$sChildContent$

self.$sName$Type = _$sName$Type
self.$sName$ = self.$sName$Type()
self.attributes['$sName$'] = True
$if(bOptional)$
self.optionals.append('$sName$')

$endif$

>>

SequenceType(arrsChildren) ::= <<
(asn1.Sequence):
    def __init__(self, source=None):
        self.attributes = dict()
        self.optionals = list()

        $arrsChildren;separator="\n"$
        self.initialized = True
        self._init_from_source(source)

    $Encoding()$
>>

SequenceOfType(sMin, sMax, sChild) ::= <<
(asn1.SequenceOf):
    $SequenceOfTypeElement(sChild)$

    __element__ = _ElementType

    constraints = 'SIZE($sMin$ .. $sMax$)'

    @classmethod
    def init_value(cls):
        return $sMin$  # array size

    @classmethod
    def check_constraints(self, value):
        result = $sMin$ <= len(value) <= $sMax$
        return result

    $Encoding(sMin=sMin, sMax=sMax)$
>>

SequenceOfTypeElement(sChild) ::= <<
class _ElementType$sChild$
>>

RefTypeMinMax(sMin, sMax, sName, sModName, sCName, sCModName) ::= <<
($sName$):
    $Typing(sName)$
>>

RefType(sName, sModName, sCName, sCModName) ::= <<
($sName$):
    $Typing(sName)$
>>

Contract(sTypePattern, sExpr) ::= ""
TypePatternCommonTypes() ::= ""
TypePatternSequence(sName, sCName, arrsChildren) ::= ""
SequencePatternChild(sName, sCName) ::= ""
ContractExprMinMax(sPattern, sMin, sMax, bFixedSize) ::= ""
ContractExprSize(sPattern, sMin, sMax, bFixedSize) ::= ""
ContractExprSequence(arrsChildren) ::= ""

Print_IntegerValue(nVal) ::= "$nVal$"
Print_RealValue(dVal) ::= "$dVal$"
Print_StringValue(v) ::= <<"$v$">>
Print_TrueValue() ::= "True"
Print_FalseValue() ::= "False"
Print_BitStringValue(v) ::= <<"$v$">>
Print_OctetStringValue(arruOctets) ::= <<bytes.fromhex('$arruOctets; format="X2"$')>>
Print_RefValue(sName) ::= <<eval('$sName$')>>
Print_SeqOfValue(arrsValues) ::= <<[$arrsValues; separator=", "$]>>
Print_SeqValue_Child(sName, sChildValue) ::= <<$sName$=$sChildValue$>>
Print_SeqValue(arrsValues) ::= <<dict($arrsValues; separator=", "$)>>
Print_ChValue(sAltName, sAltValue) ::= <<choice=dict(name='$sAltName$', value=$sAltValue$)>>
Print_NullValue() ::= "None"